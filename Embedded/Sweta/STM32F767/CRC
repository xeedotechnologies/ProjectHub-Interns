#include "stm32f7xx.h"                  // Device header
#include "stdio.h"

// PD8 for USART3 TX

// Function to write a string to USART3
void uart3_write_string(const char *str) {
    while (*str) {
        USART3->TDR = (*str & (uint16_t)0x01FF); 	// Transmit data register: Write character to transmit
        while (!(USART3->ISR & USART_ISR_TC)); 		// Wait until transmission is complete
        str++; 										// Move to the next character in the string
    }
}

// Function to calculate CRC over a data buffer
uint32_t calculate_crc(const uint32_t *data, uint32_t size) {
    CRC->CR |= CRC_CR_RESET; 						// Reset CRC calculation
    for (uint32_t i = 0; i < size; i++) {
        CRC->DR = data[i]; 							// Write data to CRC data register
    }
    return CRC->DR; 								// Return the CRC value
}

int main(void) {

    // Configure GPIOD PD8 as TX pin
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; 			// Enable clock for GPIOD
    GPIOD->MODER |= GPIO_MODER_MODER8_1; 			// Set PD8 to alternate function mode

    #define AF07 0x07
    GPIOD->AFR[1] |= (AF07 << 0); 					// Set PD8 to AF07 (USART3 TX)

    // Configure the UART
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN; 			// Enable clock for USART3
    USART3->BRR = 0x008B; 							// Set baud rate (115200 @16MHz)
    USART3->CR1 = 0; 								// Reset USART3 control register 1
    USART3->CR1 |= USART_CR1_TE; 					// Enable transmitter
    USART3->CR1 |= USART_CR1_UE; 					// Enable USART3

        RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN; 			// Enable CRC clock

    while(1) {

        uint32_t data[] = {0x12345678, 0xAABBCCDD}; 								// Sample data buffer
        uint32_t crc_result = calculate_crc(data, sizeof(data)/sizeof(uint32_t)); 	// Calculate CRC over the data buffer

        // Transmit CRC result over UART
        char crc_buffer[16];
        sprintf(crc_buffer, "CRC: %lx\r\n", crc_result); 				// Format CRC result as string
        uart3_write_string(crc_buffer); 								// Transmit CRC result

        for (volatile int i = 0; i < 100000; i++); 						// Delay loop
    }

}
